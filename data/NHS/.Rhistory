width=9,
height=7)
g <- ggplot(all.tidy, aes(x=diff)) +
geom_histogram() +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split)
ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", color, "_", split, ".png"),
plot=print(g),
device="png",
width=9,
height=7)
ggplot(all.tidy, aes(x=diff)) +
geom_histogram() +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split) +
theme_minimal()
g <- ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split) +
theme_minimal()
ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", color, "_", split, ".png"),
plot=print(g),
device="png",
width=9,
height=7)
#g <-
ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split) +
theme_minimal()
# ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", color, "_", split, ".png"),
#        plot=print(g),
#        device="png",
#        width=9,
#        height=7)
colors <- c(rep("black",4), rep("blue",4), rep("green",4), rep("pink", 4), rep("purple", 4), rep("red", 4), rep("white", 4))
colors <- c(rep("black",4), rep("blue",4), rep("green",4), rep("pink", 4), rep("purple", 4), rep("red", 4), rep("white", 4))
#g <-
ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=colors)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split) +
theme_minimal()
colors <- c(rep("black",4), rep("blue",4), rep("green",4), rep("pink", 4), rep("purple", 4), rep("red", 4), rep("white", 4))
#g <-
ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=colors)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split) +
theme_minimal() +
scale_fill_manual(values=colors)
colors <- c(rep("black",4), rep("blue",4), rep("green",4), rep("pink", 4), rep("purple", 4), rep("red", 4), rep("white", 4))
#g <-
ggplot(all.tidy, aes(x=diff)) +
geom_histogram() +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split) +
theme_minimal() +
scale_fill_manual(values=colors)
# ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", color, "_", split, ".png"),
#        plot=print(g),
#        device="png",
#        width=9,
#        height=7)
colors <- c(rep("black",4), rep("blue",4), rep("green",4), rep("pink", 4), rep("purple", 4), rep("red", 4), rep("white", 4))
#g <-
ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split) +
theme_minimal() +
scale_fill_manual(values=colors)
# ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", color, "_", split, ".png"),
#        plot=print(g),
#        device="png",
#        width=9,
#        height=7)
colors <- c("black", "blue", "green", "pink", "purple", "red", "white")
colors <- c("black", "blue", "green", "pink", "purple", "red", "white")
#g <-
ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split) +
theme_minimal() +
scale_fill_manual(values=colors)
# ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", color, "_", split, ".png"),
#        plot=print(g),
#        device="png",
#        width=9,
#        height=7)
fills <- c("black", "blue", "green", "pink", "purple", "red", "white")
borders <- c("black", "blue", "green", "pink", "purple", "red", "black")
#g <-
ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color, color=color)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split) +
theme_minimal() +
scale_fill_manual(values=fills) +
scale_color_manual(values=borders)
# ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", color, "_", split, ".png"),
#        plot=print(g),
#        device="png",
#        width=9,
#        height=7)
fills <- c("black", "blue", "green", "pink", "purple", "red", "grey")
borders <- c("black", "blue", "green", "pink", "purple", "red", "black")
#g <-
ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color, color=color)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split) +
theme_minimal() +
scale_fill_manual(values=fills) +
scale_color_manual(values=borders)
# ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", color, "_", split, ".png"),
#        plot=print(g),
#        device="png",
#        width=9,
#        height=7)
fills <- c("black", "blue", "green", "pink", "purple", "red", "grey")
borders <- c("black", "blue", "green", "pink", "purple", "red", "grey")
#g <-
ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color, color=color)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split) +
theme_minimal() +
scale_fill_manual(values=fills) +
scale_color_manual(values=borders)
# ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", color, "_", split, ".png"),
#        plot=print(g),
#        device="png",
#        width=9,
#        height=7)
fills <- c("black", "blue", "green", "pink", "purple", "red", "grey")
#borders <- c("black", "blue", "green", "pink", "purple", "red", "grey")
#g <-
ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color, color=color)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split) +
theme_minimal() +
scale_fill_manual(values=fills) #+
#scale_color_manual(values=borders)
# ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", color, "_", split, ".png"),
#        plot=print(g),
#        device="png",
#        width=9,
#        height=7)
fills <- c("black", "blue", "green", "pink", "purple", "red", "grey")
#borders <- c("black", "blue", "green", "pink", "purple", "red", "grey")
#g <-
ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color)) +#, color=color)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
ggtitle(split) +
theme_minimal() +
scale_fill_manual(values=fills) #+
#scale_color_manual(values=borders)
# ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", color, "_", split, ".png"),
#        plot=print(g),
#        device="png",
#        width=9,
#        height=7)
fills <- c("black", "blue", "green", "pink", "purple", "red", "grey")
#borders <- c("black", "blue", "green", "pink", "purple", "red", "grey")
#g <-
ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color)) +#, color=color)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
#ggtitle(split) +
theme_minimal() +
xlim(-0.5, 0.5) +
scale_fill_manual(values=fills) #+
#scale_color_manual(values=borders)
# ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", color, "_", split, ".png"),
#        plot=print(g),
#        device="png",
#        width=9,
#        height=7)
fills <- c("black", "blue", "green", "pink", "purple", "red", "grey")
#borders <- c("black", "blue", "green", "pink", "purple", "red", "grey")
g <- ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color)) +#, color=color)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
#ggtitle(split) +
theme_minimal() +
xlim(-0.5, 0.5) +
scale_fill_manual(values=fills) #+
#scale_color_manual(values=borders)
ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", split, ".png"),
plot=print(g),
device="png",
width=9,
height=7)
fills <- c("black", "blue", "green", "pink", "purple", "red", "grey")
#borders <- c("black", "blue", "green", "pink", "purple", "red", "grey")
g <- ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color)) +#, color=color)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
#ggtitle(split) +
theme_minimal() +
xlim(-0.6, 0.6) +
scale_fill_manual(values=fills) #+
#scale_color_manual(values=borders)
ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", split, ".png"),
plot=print(g),
device="png",
width=9,
height=7)
fills <- c("black", "blue", "green", "pink", "purple", "red", "grey")
#borders <- c("black", "blue", "green", "pink", "purple", "red", "grey")
g <- ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color)) +#, color=color)) +
facet_grid(color~cluster) +
xlab(paste0("Difference between Annotated and Original Image Predictions for ", color)) +
#ggtitle(split) +
theme_minimal() +
#xlim(-0.5, 0.5) +
scale_fill_manual(values=fills) #+
#scale_color_manual(values=borders)
ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", split, ".png"),
plot=print(g),
device="png",
width=9,
height=7)
fills <- c("black", "blue", "green", "pink", "purple", "red", "grey")
#borders <- c("black", "blue", "green", "pink", "purple", "red", "grey")
g <- ggplot(all.tidy, aes(x=diff)) +
geom_histogram(aes(fill=color)) +#, color=color)) +
facet_grid(color~cluster) +
xlab("Difference between Annotated and Original Image Predictions") +
theme_minimal() +
#xlim(-0.5, 0.5) +
scale_fill_manual(values=fills) #+
#scale_color_manual(values=borders)
ggsave(paste0("../figures/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei_", split, ".png"),
plot=print(g),
device="png",
width=9,
height=7)
all.tidy
head(all.tidy)
all.tidy %>%
group_by(split, color, cluster) %>%
summarize(mean_diff = mean(diff),
median_diff = median(diff))
at <- all.tidy %>%
group_by(split, color, cluster) %>%
summarize(mean_diff = mean(diff),
median_diff = median(diff))
write_delim(at, file=paste0("../results/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei.tsv"), delim="\t", append=F, quote=F, col_names=T)
at <- all.tidy %>%
group_by(split, color, cluster) %>%
summarize(mean_diff = mean(diff),
median_diff = median(diff)) %>%
mutate(across(where(is.numeric), round, 3))
write_delim(at, file=paste0("../results/rnaseq_classifier_EffB7_20210708_RNASeq_06_nuclei.tsv"), delim="\t", append=F, quote=F, col_names=T)
ggplot(at, aes(mean_diff)) +
geom_hex() +
facet_grid(color~cluster)
ggplot(at, aes(mean_diff, median_diff)) +
geom_hex() +
facet_grid(color~cluster)
ggplot(at, aes(x=color, y=cluster)) +
geom_hex()
ggplot(at, aes(x=color, y=cluster, fill=mean_diff)) +
geom_heatmap()
ggplot(at, aes(x=color, y=cluster, fill=mean_diff)) +
geom_tile()
ggplot(at, aes(x=cluster, y=color, fill=mean_diff)) +
geom_tile()
ggplot(at, aes(x=cluster, y=color, fill=mean_diff)) +
geom_tile()
ggplot(at, aes(x=cluster, y=color, fill=median_diff)) +
geom_tile()
ggplot(at, aes(x=cluster, y=color, fill=mean_diff)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient2(low="navy", mid="white", high="red",
midpoint=0, limits=range(short$pi0))
ggplot(at, aes(x=cluster, y=color, fill=mean_diff)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient2(low="navy", mid="white", high="red",
midpoint=0, limits=range(at$mean_diff))
ggplot(at, aes(x=cluster, y=color, fill=median_diff)) +
geom_tile()
ggplot(at, aes(x=cluster, y=color, fill=mean_diff)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient2(low="black", mid="white", high="red",
midpoint=0, limits=range(at$mean_diff))
ggplot(at, aes(x=cluster, y=color, fill=median_diff)) +
geom_tile()
ggplot(at, aes(x=cluster, y=color, fill=mean_diff)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient2(low="black", mid="white", high="#E59F02",
midpoint=0, limits=range(at$mean_diff))
ggplot(at, aes(x=cluster, y=color, fill=median_diff)) +
geom_tile()
ggplot(at, aes(x=cluster, y=color, fill=mean_diff)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient2(low="#57B4E8", mid="black", high="#E59F02",
midpoint=0, limits=range(at$mean_diff))
ggplot(at, aes(x=cluster, y=color, fill=median_diff)) +
geom_tile()
ggplot(at, aes(x=cluster, y=color, fill=mean_diff)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient2(low="#57B4E8", mid="grey", high="#E59F02",
midpoint=0, limits=range(at$mean_diff))
ggplot(at, aes(x=cluster, y=color, fill=median_diff)) +
geom_tile()
ggplot(at, aes(x=cluster, y=color, fill=mean_diff)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient2(low="#57B4E8", mid="#059E73", high="#E59F02",
midpoint=0, limits=range(at$mean_diff))
# ggplot(at, aes(x=cluster, y=color, fill=median_diff)) +
#   geom_tile()
ggplot(at, aes(x=cluster, y=color, fill=mean_diff)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient2(low="#57B4E8", mid="white", high="#E59F02",
midpoint=0, limits=range(at$mean_diff))
# ggplot(at, aes(x=cluster, y=color, fill=median_diff)) +
#   geom_tile()
shiny::runApp('Library/CloudStorage/GoogleDrive-elianama@mit.edu/My Drive/Projects/runthrough/Runthrough')
runExample("06_tabsets")
runExample("02_text")
runExample("03_reactivity")
runExample("04_mpg")
runExample("07_widgets")
runExample("08_html")
runExample("09_upload")
runExample("11_timer")
runApp('Library/CloudStorage/GoogleDrive-elianama@mit.edu/My Drive/Projects/runthrough/Runthrough')
runApp('Library/CloudStorage/GoogleDrive-elianama@mit.edu/My Drive/Projects/runthrough/Runthrough')
runApp('Library/CloudStorage/GoogleDrive-elianama@mit.edu/My Drive/Projects/runthrough/Runthrough')
runApp('Library/CloudStorage/GoogleDrive-elianama@mit.edu/My Drive/Projects/runthrough/Runthrough')
runApp('Library/CloudStorage/GoogleDrive-elianama@mit.edu/My Drive/Projects/runthrough/Runthrough')
runApp('Library/CloudStorage/GoogleDrive-elianama@mit.edu/My Drive/Projects/runthrough/Runthrough')
runApp('Library/CloudStorage/GoogleDrive-elianama@mit.edu/My Drive/Projects/runthrough/Runthrough')
library(clock)
library(tidyverse)
library(shiny)
library(clock)
install.packages("clock")
install.packages("clock")
install.packages("clock")
install.packages("clock")
install.packages("clock")
install.packages("clock")
library(tidyverse)
library(shiny)
# The data set
before <-c(0.8359, 0.7463, 0.7122)
after <-c(0.8867, 0.8481, 0.832935)
# Create a data frame
myData <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before, after)
)
myData
data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before, after)
)
# Create a data frame
myData <- data.frame(
group = rep(c("before", "after"), each = 3),
weight = c(before, after)
)
myData
# Print all data
print(myData)
# Paired Samples Wilcoxon Test
result = wilcox.test(before, after, paired = TRUE)
# Printing the results
print(result)
# Create a data frame
myData <- data.frame(
group = rep(c("before", "after"), each = length(before)),
weight = c(before, after)
)
myData
?wilcox.test
# Paired Samples Wilcoxon Test
result = wilcox.test(before, after, paired = TRUE, exact=TRUE, correct=TRUE)
# Printing the results
print(result)
library(tidyverse)
library(ROCR)
setwd("~/Library/CloudStorage/GoogleDrive-elianama@mit.edu/My Drive/Research/YuLab/Projects/SambaNova/HMS_artifacts_folder/NHS")
# Load in comma-separated file for 512 ("standard") results
standard <- read_delim("512_run/test_log_NHS_patch_label_per_patient_changed_512_all_9_patches_with_reassigned_pat_id/logs__rank_0.txt",
delim=",",
col_names = c("mode", "step", "pid", "img_path", "true", "predicted"),
skip=4,
skip_empty_rows = T) %>%
separate(pid, ": ", into=c(NA, "pid"), remove=T) %>%
separate(img_path, ": ", into=c(NA, "img_path"), remove=T) %>%
separate(true, ": ", into=c(NA, "true"), remove=T) %>%
separate(predicted, ": ", into=c(NA, "predicted"), remove=T) %>%
mutate(true = as.numeric(true),
predicted = as.numeric(predicted)) %>%
select(pid, true, predicted) %>%
group_by(pid) %>%
summarize(true = round(median(true)),
predicted = round(median(predicted)))
# Load in semicolon-delimited file for chips results
chips <- read_delim("1440_runs/test_log_nhs_1440_reassigned_pat_id/logs__rank_0.txt",
delim=";",
col_names = c("mode", "step", "pid", "img_path", "true", "predicted"),
skip=4,
skip_empty_rows = T) %>%
separate(pid, ": ", into=c(NA, "pid"), remove=T) %>%
separate(img_path, ": ", into=c(NA, "img_path"), remove=T) %>%
separate(true, ": ", into=c(NA, "true"), remove=T) %>%
separate(predicted, ": ", into=c(NA, "predicted"), remove=T) %>%
mutate(true = as.numeric(true),
predicted = as.numeric(predicted)) %>%
select(pid, true, predicted) %>%
group_by(pid) %>%
summarize(true = round(median(true)),
predicted = round(median(predicted)))
head(standard)
head(chips)
# Check that the results are in the same order
sum(standard$pid != chips$pid) == 0
library(pROC)
n_bootstraps = 1000
test_statistics <- c()
null <- tibble(ground_truth = standard.true,
pred = standard.pred,
chips = 0) %>%
add_row(ground_truth = chips.true,
pred = chips.pred,
chips = 1)
auc.s <- max(performance(pred.obj.s, measure="auc")@y.values[[1]])
auc.c <- max(performance(pred.obj.c, measure="auc")@y.values[[1]])
library(pROC)
n_bootstraps = 1000
test_statistics <- c()
null <- tibble(ground_truth = standard.true,
pred = standard.pred,
chips = 0) %>%
add_row(ground_truth = chips.true,
pred = chips.pred,
chips = 1)
library(pROC)
n_bootstraps = 1000
test_statistics <- c()
# reformat vectors of predicted and true values for standard and chips
standard.pred <- standard$predicted
standard.true <- standard$true
chips.pred <- chips$predicted
chips.true <- chips$true
null <- tibble(ground_truth = standard.true,
pred = standard.pred,
chips = 0) %>%
add_row(ground_truth = chips.true,
pred = chips.pred,
chips = 1)
pred.obj.s <- prediction(null$pred[null$chips==0], null$ground_truth[null$chips==0])
pred.obj.c <- prediction(null$pred[null$chips==1], null$ground_truth[null$chips==1])
auc.s <- max(performance(pred.obj.s, measure="auc")@y.values[[1]])
auc.c <- max(performance(pred.obj.c, measure="auc")@y.values[[1]])
empirical.difference <- abs(auc.c-auc.s)
auc.s <- max(performance(pred.obj.s, measure="auc")@y.values[[1]])
auc.s
auc.c
for(i in 1:n_bootstraps){
sample.inds <- sample(1:nrow(null), nrow(null), replace = T)
bootstrap.sample <- null[sample.inds,] %>%
mutate(chips = sample(chips))
bootstrap.sample.standard <- bootstrap.sample[bootstrap.sample$chips==0,]
bootstrap.sample.chips <- bootstrap.sample[bootstrap.sample$chips==1,]
# calculate AUROCs of sample
pred.obj.standard <- prediction(bootstrap.sample.standard$pred, bootstrap.sample.standard$ground_truth)
auc.bootstrap.standard <- max(performance(pred.obj.standard, measure="auc")@y.values[[1]])
pred.obj.chips <- prediction(bootstrap.sample.chips$pred, bootstrap.sample.chips$ground_truth)
auc.bootstrap.chips <-  max(performance(pred.obj.chips, measure="auc")@y.values[[1]])
test_stat <- abs(auc.bootstrap.chips-auc.bootstrap.standard)
test_statistics <- c(test_statistics, test_stat)
}
p.value <- sum(test_statistics >= empirical.difference) / n_bootstraps
p.value
